#version 330 core

in vec3 fragColor;

out vec3 color;

in vec2 TexCoord;
uniform sampler2D myTextureSampler;

in vec3 position_worldspace;
in vec3 normal_worldspace;


uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 aL;
uniform vec2 data;


void main()
{
	vec3 textureColor = texture( myTextureSampler, TexCoord ).rgb;

	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	vec3 light_color = vec3(1,1,1);
	vec3 diffuseLight = light_color *vec3(brightness,brightness,brightness);
	diffuseLight = clamp(diffuseLight,0,1);

	////Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = data.y;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = light_color * vec3(specularity,specularity,specularity);
	specularLight = clamp(specularLight,0,1);

	float d = abs(distance(position_worldspace,LightPosition_worldspace));
	float r = data.x;
	float att = 1 - (d/r);
	if ( att < 0)
		att = 0;

	color = (aL + (diffuseLight + specularLight)*att) * textureColor;
}
